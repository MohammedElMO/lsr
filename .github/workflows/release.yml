name: Release Crate + CLI(lsr)

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
    paths:
      - 'Cargo.toml'



jobs:
  # Only run if this is a version tag or main branch with version bump
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Check if should release
        id: check
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            # Check if Cargo.toml version changed in this commit
            if git diff HEAD~1 HEAD --name-only | grep -q "Cargo.toml"; then
              VERSION=$(grep '^version = ' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version=v$VERSION" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  test:
    uses: ./.github/workflows/test.yml

  build-release:
    needs: [check-version, test]
    if: needs.check-version.outputs.should_release == 'true'

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build optimized binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/lsr${{ matrix.suffix }}

      - name: Create release archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a ../../../lsr-${{ matrix.target }}.zip lsr.exe
          else
            tar czf ../../../lsr-${{ matrix.target }}.tar.gz lsr
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.target }}
          path: |
            lsr-${{ matrix.target }}.*

  publish-crate:
    needs: [check-version, test]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}

  create-github-release:
    needs: [check-version, build-release, publish-crate]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.version }}
          name: Release ${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          body: |
            ## What's Changed
            
            * See [CHANGELOG.md](CHANGELOG.md) for detailed changes
            
            ## Installation
            
            ### Via Cargo
            ```bash
            cargo install lsr
            ```
            
            ### Download Binary
            Download the appropriate binary for your platform from the assets below.

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}