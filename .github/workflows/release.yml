name: Release Crate + CLI(lsr)

on:
  push:
    tags:
      - 'v*'

# Add permissions for the workflow
permissions:
  contents: write  # Required to create releases
  packages: write  # Optional: for package publishing

jobs:
  test:
    uses: ./.github/workflows/test.yml

  build-release:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build optimized binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/lsr${{ matrix.suffix }}

      - name: Create release archive
        shell: bash
        run: |
          # Create archive in root directory
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cd target/${{ matrix.target }}/release
            7z a ../../../lsr-${{ matrix.target }}.zip lsr.exe
            cd ../../..
          else
            cd target/${{ matrix.target }}/release
            tar czf ../../../lsr-${{ matrix.target }}.tar.gz lsr
            cd ../../..
          fi
          
          # Verify file exists
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ls -la lsr-${{ matrix.target }}.zip
          else
            ls -la lsr-${{ matrix.target }}.tar.gz
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: |
            lsr-${{ matrix.target }}.tar.gz
            lsr-${{ matrix.target }}.zip

  publish-crate:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}

  create-github-release:
    needs: [build-release, publish-crate]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List artifacts (debug)
        run: find artifacts/ -type f -ls

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          body: |
            ## Installation
            
            ### Via Cargo
            ```bash
            cargo install lsr
            ```
            
            ### Download Binary
            Download the appropriate binary for your platform from the assets below:
            - **Linux**: `lsr-x86_64-unknown-linux-gnu.tar.gz`
            - **Windows**: `lsr-x86_64-pc-windows-msvc.zip`  
            - **macOS Intel**: `lsr-x86_64-apple-darwin.tar.gz`
            - **macOS M1/M2**: `lsr-aarch64-apple-darwin.tar.gz`

        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use PAT if permissions don't work