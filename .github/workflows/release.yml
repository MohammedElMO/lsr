name: Release Crate + CLI(lsr)

on:
  push:
    tags:
      - 'v*'

# Add permissions for the workflow
permissions:
  contents: write  # Required to create releases
  packages: write  # Optional: for package publishing

jobs:
  test:
    uses: ./.github/workflows/test.yml

  build-release:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build optimized binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/lsr${{ matrix.suffix }}

      - name: Create release archive
        shell: bash
        run: |
          # Create archive in root directory
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cd target/${{ matrix.target }}/release
            7z a ../../../lsr-${{ matrix.target }}.zip lsr.exe
            cd ../../..
          else
            cd target/${{ matrix.target }}/release
            tar czf ../../../lsr-${{ matrix.target }}.tar.gz lsr
            cd ../../..
          fi
          
          # Verify file exists
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ls -la lsr-${{ matrix.target }}.zip
          else
            ls -la lsr-${{ matrix.target }}.tar.gz
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: |
            lsr-${{ matrix.target }}.tar.gz
            lsr-${{ matrix.target }}.zip

  publish-crate:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}

  create-github-release:
    needs: [ build-release, publish-crate ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create install scripts
        run: |
          # Create install.sh
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e

          # Configuration
          REPO="MohammedElMO/lsrs"  # Replace with your actual repo
          BINARY_NAME="lsrs"
          VERSION="${{ github.ref_name }}"
          INSTALL_DIR="${INSTALL_DIR:-/usr/local/bin}"

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'

          log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
          log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
          log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

          # Detect platform
          detect_platform() {
              local os=$(uname -s | tr '[:upper:]' '[:lower:]')
              local arch=$(uname -m)

              case $arch in
                  x86_64) arch="x86_64" ;;
                  arm64|aarch64) arch="aarch64" ;;
                  *) log_error "Unsupported architecture: $arch" && exit 1 ;;
              esac

              case $os in
                  linux) echo "x86_64-unknown-linux-gnu" ;;
                  darwin)
                      if [[ $arch == "aarch64" ]]; then
                          echo "aarch64-apple-darwin"
                      else
                          echo "x86_64-apple-darwin"
                      fi
                      ;;
                  *) log_error "Unsupported OS: $os" && exit 1 ;;
              esac
          }

          # Main installation
          main() {
              log_info "Installing $BINARY_NAME $VERSION..."

              for cmd in curl tar; do
                  if ! command -v $cmd >/dev/null 2>&1; then
                      log_error "Required command not found: $cmd"
                      exit 1
                  fi
              done

              local platform=$(detect_platform)
              local archive_name="${BINARY_NAME}-${platform}.tar.gz"
              local download_url="https://github.com/$REPO/releases/download/$VERSION/$archive_name"

              log_info "Platform: $platform"
              log_info "Downloading from: $download_url"

              local tmp_dir=$(mktemp -d)
              cd "$tmp_dir"

              if ! curl -L "$download_url" | tar xz; then
                  log_error "Failed to download or extract"
                  exit 1
              fi

              chmod +x "$BINARY_NAME"

              if [[ ! -w "$INSTALL_DIR" ]]; then
                  sudo mv "$BINARY_NAME" "$INSTALL_DIR/"
              else
                  mv "$BINARY_NAME" "$INSTALL_DIR/"
              fi

              cd - >/dev/null && rm -rf "$tmp_dir"

              if command -v "$BINARY_NAME" >/dev/null 2>&1; then
                  log_info "✅ Installation successful!"
                  log_info "Run '$BINARY_NAME --help' to get started"
              else
                  log_warn "Installed but not in PATH. Add $INSTALL_DIR to PATH or run:"
                  log_warn "export PATH=\"$INSTALL_DIR:\$PATH\""
              fi
          }

          main "$@"
          EOF

          # Create install.ps1
          cat > install.ps1 << 'EOF'
          param([string]$InstallDir = "$env:USERPROFILE\.local\bin")

          $REPO = "your-username/lsr"
          $BINARY_NAME = "lsr"
          $VERSION = "${{ github.ref_name }}"

          function Write-Info { param([string]$Message); Write-Host "[INFO] $Message" -ForegroundColor Green }
          function Write-Error { param([string]$Message); Write-Host "[ERROR] $Message" -ForegroundColor Red }

          Write-Info "Installing $BINARY_NAME $VERSION..."

          $platform = "x86_64-pc-windows-msvc"
          $archiveName = "$BINARY_NAME-$platform.zip"
          $downloadUrl = "https://github.com/$REPO/releases/download/$VERSION/$archiveName"

          $tempDir = Join-Path $env:TEMP ([System.Guid]::NewGuid().ToString())
          New-Item -ItemType Directory -Path $tempDir | Out-Null

          try {
              $archivePath = Join-Path $tempDir $archiveName
              Invoke-WebRequest -Uri $downloadUrl -OutFile $archivePath
              Expand-Archive -Path $archivePath -DestinationPath $tempDir -Force

              if (-not (Test-Path $InstallDir)) {
                  New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
              }

              $binaryPath = Join-Path $tempDir "$BINARY_NAME.exe"
              $installPath = Join-Path $InstallDir "$BINARY_NAME.exe"
              Copy-Item $binaryPath $installPath -Force

              Write-Info "✅ Installation successful!"
              Write-Info "Run '$BINARY_NAME --help' to get started"
          }
          catch {
              Write-Error "Installation failed: $($_.Exception.Message)"
              exit 1
          }
          finally {
              Remove-Item $tempDir -Recurse -Force
          }
          EOF

      - name: List artifacts (debug)
        run: find artifacts/ -type f -ls

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
            install.sh
            install.ps1
          body: |
            ## Installation

            ### Via Cargo
            ```bash
            cargo install lsrs
            ```

            ### Download Binary
            Download the appropriate binary for your platform from the assets below:
            - **Linux**: `lsr-x86_64-unknown-linux-gnu.tar.gz`
            - **Windows**: `lsr-x86_64-pc-windows-msvc.zip`  
            - **macOS Intel**: `lsr-x86_64-apple-darwin.tar.gz`
            - **macOS M1/M2**: `lsr-aarch64-apple-darwin.tar.gz`
            
            ### Install scripts(install.sh(unix,mac),install.ps1 for windows)
            ```bash
             chmod +x ./install.sh
              ./install.sh
              same for ..sp1
            ```
          env:
            GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}