name: Test Crate + CLI(lsr)

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # Simplified cache without non-existent files
      - name: Cache Rust toolchain
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ runner.os }}-stable
          restore-keys: rust-toolchain-${{ runner.os }}-

      - name: Setup Rust (with cache)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Cache 2: Cargo registry and git dependencies
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-

      # Cache 3: Build artifacts (target directory)
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: target
          key: cargo-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', 'src/**', 'tests/**') }}
          restore-keys: |
            cargo-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-build-${{ runner.os }}-

      # Now the actual work (super fast with cache)
      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build release binary
        run: cargo build --release

  # Separate quick job for basic checks (runs in parallel)
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Simplified cache
      - name: Cache Rust toolchain
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-ubuntu-latest-stable
          restore-keys: rust-toolchain-ubuntu-latest-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: quick-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: quick-check-

      - name: Quick compile check
        run: cargo check --all-targets

      - name: Documentation check
        run: cargo doc --no-deps --document-private-items